name: Main Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: uplox

jobs:
  security-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git user
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Git Leaks Check
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests with coverage
      run: pnpm turbo test:coverage
      continue-on-error: false

    - name: Generate coverage report
      run: |
        # Extract coverage percentage and test results
        COVERAGE=$(cat apps/uplox/coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
        TEST_STATUS="passed"
        
        # Check if all tests passed (this assumes vitest exits with 0 on success)
        if [ $? -ne 0 ]; then
          TEST_STATUS="failed"
        fi
        
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "TEST_STATUS=$TEST_STATUS" >> $GITHUB_ENV

    - name: Create coverage badge
      run: |
        COVERAGE=${{ env.COVERAGE }}
        TEST_STATUS=${{ env.TEST_STATUS }}
        
        # Determine coverage color
        if (( $(echo "$COVERAGE >= 75" | bc -l) )); then
          COVERAGE_COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
          COVERAGE_COLOR="yellow"
        else
          COVERAGE_COLOR="red"
        fi
        
        # Determine test status color
        if [ "$TEST_STATUS" = "passed" ]; then
          TEST_COLOR="brightgreen"
        else
          TEST_COLOR="red"
        fi
        
        # Create badge URLs
        COVERAGE_BADGE="![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COVERAGE_COLOR})"
        TEST_BADGE="![Tests](https://img.shields.io/badge/tests-${TEST_STATUS}-${TEST_COLOR})"
        
        echo "COVERAGE_BADGE=$COVERAGE_BADGE" >> $GITHUB_ENV
        echo "TEST_BADGE=$TEST_BADGE" >> $GITHUB_ENV

    - name: Update README with badges
      run: |
        # Update README.md with new badges
        if [ -f README.md ]; then
          # Remove existing badges if they exist
          sed -i '/!\[Coverage\]/d' README.md
          sed -i '/!\[Tests\]/d' README.md
          
          # Add new badges at the top after the title
          if grep -q "^# " README.md; then
            sed -i "/^# /a\\n${{ env.COVERAGE_BADGE }} ${{ env.TEST_BADGE }}" README.md
          else
            echo -e "${{ env.COVERAGE_BADGE }} ${{ env.TEST_BADGE }}\n$(cat README.md)" > README.md
          fi
        fi

    - name: Commit badge updates
      run: |
        if git diff --quiet README.md; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update coverage and test badges [skip ci]"
          git push
        fi

  build-and-security:
    needs: security-and-test
    runs-on: ubuntu-latest
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: build
      run: |
        chmod +x scripts/build-docker.sh
        ./scripts/build-docker.sh true
        
        # Tag the image for security scanning
        docker tag uplox:latest uplox:scan
        echo "digest=$(docker images --digests uplox:latest --format '{{.Digest}}')" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'uplox:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Scout (optional additional security check)
      if: github.event_name == 'push'
      run: |
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        docker scout cves uplox:scan --exit-code --only-severity critical,high

    - name: Save Docker image
      if: env.PUSH_TO_DOCKERHUB == 'true'
      run: |
        docker save uplox:latest | gzip > uplox-image.tar.gz

    - name: Upload Docker image artifact
      if: env.PUSH_TO_DOCKERHUB == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: uplox-image.tar.gz
        retention-days: 1

  push-to-dockerhub:
    needs: build-and-security
    runs-on: ubuntu-latest
    if: env.PUSH_TO_DOCKERHUB == 'true'
    
    steps:
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < uplox-image.tar.gz

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/uplox
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Tag and push Docker image
      run: |
        # Tag the image with metadata
        for tag in ${{ steps.meta.outputs.tags }}; do
          docker tag uplox:latest $tag
          docker push $tag
        done

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: ${{ secrets.DOCKERHUB_USERNAME }}/uplox
        readme-filepath: ./README.md
