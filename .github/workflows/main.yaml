name: Main Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  security-events: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: uplox
  PUSH_TO_DOCKERHUB: 'false'

jobs:
  security-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git user
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Git Leaks Check
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests with coverage
      run: pnpm run test:workspace:coverage
      continue-on-error: false

    - name: Generate coverage report
      run: |
        # Check if coverage file exists and extract coverage percentage
        COVERAGE_FILE="coverage/coverage-summary.json"
        if [ -f "$COVERAGE_FILE" ]; then
          COVERAGE=$(cat "$COVERAGE_FILE" | jq -r '.total.lines.pct // 0')
          # Ensure COVERAGE is a valid number
          if ! [[ "$COVERAGE" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            COVERAGE="0"
          fi
        else
          echo "Coverage file not found at $COVERAGE_FILE"
          COVERAGE="0"
        fi
        
        TEST_STATUS="passed"
        
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "TEST_STATUS=$TEST_STATUS" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"

    - name: Create coverage badge
      run: |
        COVERAGE="${{ env.COVERAGE }}"
        TEST_STATUS="${{ env.TEST_STATUS }}"
        
        # Ensure COVERAGE is a valid number for comparison
        if ! [[ "$COVERAGE" =~ ^[0-9]+\.?[0-9]*$ ]]; then
          COVERAGE="0"
        fi
        
        # Determine coverage color using awk instead of bc
        COVERAGE_COLOR="red"
        if awk "BEGIN {exit !($COVERAGE >= 75)}"; then
          COVERAGE_COLOR="brightgreen"
        elif awk "BEGIN {exit !($COVERAGE >= 50)}"; then
          COVERAGE_COLOR="yellow"
        fi
        
        # Determine test status color
        if [ "$TEST_STATUS" = "passed" ]; then
          TEST_COLOR="brightgreen"
        else
          TEST_COLOR="red"
        fi
        
        # Create badge URLs (URL encode the % sign)
        COVERAGE_BADGE="![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COVERAGE_COLOR})"
        TEST_BADGE="![Tests](https://img.shields.io/badge/tests-${TEST_STATUS}-${TEST_COLOR})"
        
        echo "COVERAGE_BADGE=$COVERAGE_BADGE" >> $GITHUB_ENV
        echo "TEST_BADGE=$TEST_BADGE" >> $GITHUB_ENV

    - name: Update README with badges
      run: |
        # Update README.md with new badges
        if [ -f README.md ]; then
          # Remove existing badges if they exist
          sed -i '/!\[Coverage\]/d' README.md
          sed -i '/!\[Tests\]/d' README.md
          
          # Add new badges at the top after the title
          if grep -q "^# " README.md; then
            sed -i "/^# /a${{ env.COVERAGE_BADGE }} ${{ env.TEST_BADGE }}" README.md
          else
            echo -e "${{ env.COVERAGE_BADGE }} ${{ env.TEST_BADGE }}\n$(cat README.md)" > README.md
          fi
        fi

    - name: Commit badge updates
      run: |
        if git diff --quiet README.md; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update coverage and test badges [skip ci]"
          git push
        fi

  build-and-security:
    needs: security-and-test
    runs-on: ubuntu-latest
    
    outputs:
      built-images: ${{ steps.build.outputs.images }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      id: build
      run: |
        chmod +x scripts/build-docker.sh
        ./scripts/build-docker.sh true
        
        # Get all built images dynamically by matching what the build script actually creates
        # The build script builds images with their original names when INCLUDE_CLAMAV=true
        BUILT_IMAGES=()
        while IFS= read -r -d '' dockerfile_path; do
          dockerfile_dir=$(dirname "$dockerfile_path")
          image_name=$(basename "$dockerfile_dir")
          # When INCLUDE_CLAMAV=true, the build script uses the original name
          BUILT_IMAGES+=("$image_name")
        done < <(find apps -name "Dockerfile" -type f -print0)
        
        # Convert array to JSON string for output (more robust approach)
        if [ ${#BUILT_IMAGES[@]} -gt 0 ]; then
          IMAGES_JSON="["
          for i in "${!BUILT_IMAGES[@]}"; do
            if [ $i -gt 0 ]; then
              IMAGES_JSON+=","
            fi
            IMAGES_JSON+="\"${BUILT_IMAGES[$i]}\""
          done
          IMAGES_JSON+="]"
        else
          IMAGES_JSON="[]"
        fi
        
        echo "images=$IMAGES_JSON" >> $GITHUB_OUTPUT
        echo "Built images JSON: $IMAGES_JSON"
        
        # Tag the first image for security scanning (backward compatibility)
        if [ ${#BUILT_IMAGES[@]} -gt 0 ]; then
          docker tag "${BUILT_IMAGES[0]}:latest" "${BUILT_IMAGES[0]}:scan"
          echo "scan-image=${BUILT_IMAGES[0]}" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: steps.build.outputs.scan-image != ''
      with:
        image-ref: '${{ steps.build.outputs.scan-image }}:scan'
        format: 'sarif'
        scan-type: 'image'
        output: 'trivy-results.sarif'
        scanners: "vuln"
        skip-files: '*.tar,*.zip,*.jar,*.war,*.gem,*.whl,*.cvd'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Scout (optional additional security check)
      if: github.event_name == 'push' && steps.build.outputs.scan-image != ''
      run: |
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        docker scout cves "${{ steps.build.outputs.scan-image }}:scan" --exit-code --only-severity critical,high

    - name: Save Docker images
      if: env.PUSH_TO_DOCKERHUB == 'true'
      run: |
        # Save all built images
        IMAGES='${{ steps.build.outputs.images }}'
        echo "$IMAGES" | jq -r '.[]' | while read -r image_name; do
          echo "Saving image: $image_name"
          docker save "$image_name:latest" | gzip > "${image_name}-image.tar.gz"
        done

    - name: Upload Docker image artifacts
      if: env.PUSH_TO_DOCKERHUB == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: '*-image.tar.gz'
        retention-days: 1

  push-to-dockerhub:
    needs: build-and-security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.build-and-security.outputs.built-images) }}
    steps:
    - name: Download Docker image artifacts
      if: env.PUSH_TO_DOCKERHUB == 'true'
      uses: actions/download-artifact@v4
      with:
        name: docker-images

    - name: Load Docker image
      if: env.PUSH_TO_DOCKERHUB == 'true'
      run: |
        docker load < "${{ matrix.image }}-image.tar.gz"

    - name: Log in to Docker Hub
      if: env.PUSH_TO_DOCKERHUB == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Extract metadata
      if: env.PUSH_TO_DOCKERHUB == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Tag and push Docker image
      if: env.PUSH_TO_DOCKERHUB == 'true'
      run: |
        # Tag the image with metadata
        for tag in ${{ steps.meta.outputs.tags }}; do
          docker tag "${{ matrix.image }}:latest" "$tag"
          docker push "$tag"
        done

    - name: Update Docker Hub description
      if: env.PUSH_TO_DOCKERHUB == 'true'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}
        readme-filepath: ./README.md
