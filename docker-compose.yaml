services:
  uplox:
    build:
      context: .
      dockerfile: apps/uplox/Dockerfile.dev
    image: uplox-dev:latest
    container_name: uplox-uplox
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    command: pnpm run dev
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://cache:6379
      - MINIO_ENDPOINT=storage
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=miniosuperadmin
      - MINIO_SECRET_KEY=miniosuperadmin
      - MINIO_BUCKET=uplox
      - MINIO_REGION=us-east-1
      - SCANNER_HOST=scanner
      - SCANNER_PORT=3310
    depends_on:
      - cache
      - storage
    networks:
      - uplox-network

  scanner:
    build:
      context: .
      dockerfile: apps/scanner/Dockerfile.dev
    image: scanner-dev:latest
    container_name: uplox-scanner
    ports:
      - "3310:3310"
    volumes:
      - ./infra/scanner/clamav:/var/lib/clamav
      - ./apps/scanner/sample/sample.txt:/var/lib/clamav/sample.txt
      - ./apps/scanner/config/clamav_conf.conf:/etc/clamav/clamd.conf
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/3310' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - uplox-network

  cache:
    image: redis/redis-stack:7.2.0-v17
    container_name: uplox-cache
    ports:
      - "6379:6379"
    volumes:
      - ./infra/cache:/data
    networks:
      - uplox-network

  storage:
    image: minio/minio:latest
    container_name: uplox-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./infra/storage:/data
    environment:
      - MINIO_ROOT_USER=miniosuperadmin
      - MINIO_ROOT_PASSWORD=miniosuperadmin
      - MINIO_BUCKET=uplox
      - MINIO_REGION=us-east-1
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/9000' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - uplox-network

  prometheus:
    image: prom/prometheus:latest
    container_name: uplox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - uplox
    networks:
      - uplox-network

  grafana:
    image: grafana/grafana:latest
    container_name: uplox-grafana
    ports:
      - "3001:3000"
    volumes:
      - ./infra/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - prometheus
    networks:
      - uplox-network

  k6:
    image: grafana/k6:latest
    container_name: uplox-k6
    ports:
      - "6565:6565"
    volumes:
      - ./k6:/k6
      - ./k6/results:/shared  # Mount for test results
    environment:
      - K6_VUS=${K6_VUS:-100}  # Default 100 VUs
      - K6_DURATION=${K6_DURATION:-15m}  # Default 10 minutes
      - K6_TARGET_URL=${K6_TARGET_URL:-http://uplox:3000}  # Target URL
      - K6_DISTRIBUTED_MODE=${K6_DISTRIBUTED_MODE:-false}  # Distributed mode
    working_dir: /k6
    depends_on:
      - uplox
    command: ["run", "src/main-tests.ts"]
    networks:
      - uplox-network

networks:
  uplox-network:
    driver: bridge
